type Card {
  wordValue: String
  typeValue: CardType
  position: Position
  isRevealed: Boolean
}

enum CardType {
  RED_AGENT
  BLUE_AGENT
  BYSTANDER
  ASSASSIN
}

type Clue {
  word: String
  number: Int
  reasoning: String
}

type EndGame {
  ok: Boolean
}

type EndTurn {
  ok: Boolean
}

type Game {
  board: [Card]
  turn: Team
  turnCount: Int
  currentClue: Clue
  redClues: [Clue]
  blueClues: [Clue]
  winner: Team
  redOperatives: [String]
  blueOperatives: [String]
}

type GenerateClue {
  ok: Boolean
  clue: Clue
}

type GuessCard {
  ok: Boolean
}

type JoinRoom {
  room: Room
}

type Mutation {
  guessCard(position: PositionInput!, roomId: ID!): GuessCard
  endTurn(roomId: ID!): EndTurn
  endGame(roomId: ID!): EndGame
  generateClue(roomId: ID!): GenerateClue
  startRoom(fluidId: ID!, playerId: String!): StartRoom
  joinRoom(playerId: String!, roomId: String!, team: Team!): JoinRoom
}

type Position {
  x: Int
  y: Int
}

input PositionInput {
  x: Int
  y: Int
}

type Query {
  card(position: PositionInput!): Card
  game(roomId: ID!): Game
}

type Room {
  id: ID
  fluidId: ID
  name: String
  game: Game
}

type StartRoom {
  room: Room
}

enum Team {
  RED
  BLUE
}
